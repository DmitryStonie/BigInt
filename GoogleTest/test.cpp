#include "pch.h"
#include "../BigInt/BigInt.h"
#include <string>


TEST(TestNumbers, StrInitializationTransition) {
	BigInt n1("115792089237316195423570985008687907853269984665640564039457584007913129639936");
	BigInt n2("-115792089237316195423570985008687907853269984665640564039457584007913129639935");
	BigInt n3("48563425834895345345");
	BigInt n4("-3298473482");
	BigInt n5("0");
	BigInt n6("1");
	BigInt n7("-985008687907853269984665640564039457584007913129639936");
	BigInt n8("-1");

	ASSERT_EQ(string(n1), "115792089237316195423570985008687907853269984665640564039457584007913129639936");
	ASSERT_EQ(string(n2), "-115792089237316195423570985008687907853269984665640564039457584007913129639935");
	ASSERT_EQ(string(n3), "48563425834895345345");
	ASSERT_EQ(string(n4), "-3298473482");
	ASSERT_EQ(string(n5), "0");
	ASSERT_EQ(string(n6), "1");
	ASSERT_EQ(string(n7), "-985008687907853269984665640564039457584007913129639936");
	ASSERT_EQ(string(n8), "-1");
}
TEST(TestNumbers, PlusMinusIncDec) {
	BigInt n1("115792089237316195423570985008687907853269984665640564039457584007913129639936");
	BigInt n2("115792089237316195423570985008687907853269984665640564039457584007913129639935");
	BigInt n3("4294967295");
	BigInt n4("1");
	BigInt n5("0");
	BigInt n6("-985008687907853269984665640564039457584007913129639936");
	BigInt n7("-731619542357098500868");
	BigInt n8("731619542357098500868");
	ASSERT_EQ((string)(n1 + n2), "231584178474632390847141970017375815706539969331281128078915168015826259279871");
	ASSERT_EQ((string)(n3 + n4), "4294967296");
	ASSERT_EQ((string)(n5 + n6), "-985008687907853269984665640564040189203550270228140804");
	ASSERT_EQ((string)(n7 + n8), "0");
	ASSERT_EQ((string)(n8 - n8), "0");
	ASSERT_EQ((string)(n5 - n5), "0");
	ASSERT_EQ((string)(n6 + n8), "-985008687907853269984665640564038725964465556031139068");
	ASSERT_EQ((string)(n6 - n8), "985008687907853269984665640564040189203550270228140804");
	ASSERT_EQ((string)(n1 - n2), "1");
	ASSERT_EQ((string)(n2 - n1), "-1");
	ASSERT_EQ((string)(n6 + n7), "-985008687907853269984665640564040189203550270228140804");
}

TEST(TestNumbers, Multiple) {
	BigInt n1("115792089237316195423570985008687907853269984665640564039457584007913129639936");
	BigInt n2("115792089237316195423570985008687907853269984665640564039457584007913129639935");
	BigInt n3("4294967295");
	BigInt n4("1");
	BigInt n5("0");
	BigInt n6("-985008687907853269984665640564039457584007913129639936");
	BigInt n7("-731619542357098500868");
	BigInt n8("731619542357098500868");
	BigInt n9("-1");
	ASSERT_EQ((string)(n1 * n2), "57098500868790785326998466564056403945758400791312963993513407807929942597099574024998205846127479365820592393377723561443721764030073431184712636981971479856705023170278632780869088242247907112362425735876444160");
	ASSERT_EQ((string)(n3 * n4), "4294967295");
	ASSERT_EQ((string)(n5 * n6), "0");
	ASSERT_EQ((string)(n1 * n5), "0");
	ASSERT_EQ((string)(n6 * n5), "0");
	ASSERT_EQ((string)(n5 * n5), "0");
	ASSERT_EQ((string)(n6 * n7), "720651605464909673383233505008234931221187716181932055550872907282223464448");
	ASSERT_EQ((string)(n6 * n8), "-985008687907853269984665640564040189203550270228140804");
	ASSERT_EQ((string)(n1 * n4), "115792089237316195423570985008687907853269984665640564039457584007913129639936");
	ASSERT_EQ((string)(n1 * n9), "-115792089237316195423570985008687907853269984665640564039457584007913129639936");
}

TEST(TestNumbers, DivisionCarry) {
	BigInt n1("115792089237316195423570985008687907853269984665640564039457584007913129639936");
	BigInt n2("115792089237316195423570985008687907853269984665640564039457584007913129639935");
	BigInt n3("48563425834895345345");
	BigInt n4("-3298473482");
	BigInt n5("0");
	BigInt n6("1");
	ASSERT_EQ(string(n1 / n2), "1");
	ASSERT_EQ((string)(n1 % n2), "1");
	ASSERT_EQ((string)(n3 / n4), "-14723000231");
	ASSERT_EQ((string)(n3 % n4), "-2538028997");
	//error ASSERT_EQ((string)(n1 / n5), "1");
	ASSERT_EQ((string)(n1 / n5), "1");
	ASSERT_EQ((string)(n6 % n2), "0");
	ASSERT_EQ((string)(n4 / n6), "-3298473482");
	ASSERT_EQ((string)(n3 % n6), "0");
	ASSERT_EQ((string)n3, "0");
}

TEST(TestNumbers, BitOperations) {
	BigInt n1("115792089237316195423570985008687907853269984665640564039457584007913129639936");
	BigInt n2("115792089237316195423570985008687907853269984665640564039457584007913129639935");
	BigInt n3("48563425834895345345");
	BigInt n4("-3298473482");
	BigInt n5("0");
	BigInt n6("1");
	
}

TEST(TestNumbers, BoolOperations) {
	BigInt n1("115792089237316195423570985008687907853269984665640564039457584007913129639936");
	BigInt n2("115792089237316195423570985008687907853269984665640564039457584007913129639935");
	BigInt n3("48563425834895345345");
	BigInt n4("-3298473482");
	BigInt n5("0");
	BigInt n6("1");

}
